// Code generated by jtd-codegen for Rust v0.2.1

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
#[serde(tag = "dataKind")]
pub enum BackendData {
    #[serde(rename = "BROWSER")]
    Browser(BackendDataBrowser),

    #[serde(rename = "GLOBAL")]
    Global(BackendDataGlobal),

    #[serde(rename = "MANAGEMENT")]
    Management(BackendDataManagement),

    #[serde(rename = "PROCESS")]
    Process(BackendDataProcess),

    #[serde(rename = "SERVICE")]
    Service(BackendDataService),

    #[serde(rename = "SOFTWARE")]
    Software(BackendDataSoftware),

    #[serde(rename = "STATISTIC")]
    Statistic(BackendDataStatistic),
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataBrowserContent {
    #[serde(rename = "fileName")]
    pub fileName: String,

    #[serde(rename = "filePath")]
    pub filePath: String,

    #[serde(rename = "fileSize")]
    pub fileSize: u64,

    #[serde(rename = "mainType")]
    pub mainType: String,

    #[serde(rename = "prettyType")]
    pub prettyType: String,

    #[serde(rename = "subType")]
    pub subType: String,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataBrowser {
    #[serde(rename = "contents")]
    pub contents: Vec<BackendDataBrowserContent>,
}

#[derive(Serialize, Deserialize)]
pub enum BackendDataGlobalTempUnit {
    #[serde(rename = "celsius")]
    Celsius,

    #[serde(rename = "fahrenheit")]
    Fahrenheit,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataGlobal {
    #[serde(rename = "dashboardVersion")]
    pub dashboardVersion: String,

    #[serde(rename = "loginNeeded")]
    pub loginNeeded: bool,

    #[serde(rename = "tempUnit")]
    pub tempUnit: BackendDataGlobalTempUnit,

    #[serde(rename = "updateCheck")]
    pub updateCheck: bool,

    #[serde(rename = "dietpiUpdate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dietpiUpdate: Option<Box<String>>,

    #[serde(rename = "nodes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Box<Vec<String>>>,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataManagement {
    #[serde(rename = "arch")]
    pub arch: String,

    #[serde(rename = "dpVersion")]
    pub dpVersion: String,

    #[serde(rename = "hostname")]
    pub hostname: String,

    #[serde(rename = "ipAddr")]
    pub ipAddr: String,

    #[serde(rename = "kernelVersion")]
    pub kernelVersion: String,

    #[serde(rename = "netInterface")]
    pub netInterface: String,

    #[serde(rename = "packageNumber")]
    pub packageNumber: u32,

    #[serde(rename = "packageUpgrades")]
    pub packageUpgrades: u32,

    #[serde(rename = "uptime")]
    pub uptime: u32,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataProcessProcess {
    #[serde(rename = "cpu")]
    pub cpu: f32,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "pid")]
    pub pid: u32,

    #[serde(rename = "ram")]
    pub ram: u64,

    #[serde(rename = "status")]
    pub status: String,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataProcess {
    #[serde(rename = "processes")]
    pub processes: Vec<BackendDataProcessProcess>,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataServiceService {
    #[serde(rename = "log")]
    pub log: String,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "startTime")]
    pub startTime: String,

    #[serde(rename = "status")]
    pub status: String,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataService {
    #[serde(rename = "services")]
    pub services: Vec<BackendDataServiceService>,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataSoftware {
    #[serde(rename = "installed")]
    pub installed: Vec<SoftwareData>,

    #[serde(rename = "response")]
    pub response: String,

    #[serde(rename = "uninstalled")]
    pub uninstalled: Vec<SoftwareData>,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataStatisticNetwork {
    #[serde(rename = "received")]
    pub received: u64,

    #[serde(rename = "sent")]
    pub sent: u64,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataStatisticTemp {
    #[serde(rename = "available")]
    pub available: bool,

    #[serde(rename = "celsius")]
    pub celsius: i16,

    #[serde(rename = "fahrenheit")]
    pub fahrenheit: i16,
}

#[derive(Serialize, Deserialize)]
pub struct BackendDataStatistic {
    #[serde(rename = "cpu")]
    pub cpu: f32,

    #[serde(rename = "disk")]
    pub disk: UsageData,

    #[serde(rename = "network")]
    pub network: BackendDataStatisticNetwork,

    #[serde(rename = "ram")]
    pub ram: UsageData,

    #[serde(rename = "swap")]
    pub swap: UsageData,

    #[serde(rename = "temp")]
    pub temp: BackendDataStatisticTemp,
}

#[derive(Serialize, Deserialize)]
pub struct SoftwareData {
    #[serde(rename = "dependencies")]
    pub dependencies: String,

    #[serde(rename = "description")]
    pub description: String,

    #[serde(rename = "docs")]
    pub docs: String,

    #[serde(rename = "id")]
    pub id: i16,

    #[serde(rename = "name")]
    pub name: String,
}

#[derive(Serialize, Deserialize)]
pub struct UsageData {
    #[serde(rename = "percent")]
    pub percent: u64,

    #[serde(rename = "total")]
    pub total: u64,

    #[serde(rename = "used")]
    pub used: u64,
}
