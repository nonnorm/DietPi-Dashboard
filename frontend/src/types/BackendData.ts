// Code generated by jtd-codegen for TypeScript v0.2.1

export type BackendData = BackendDataBrowser | BackendDataGlobal | BackendDataManagement | BackendDataProcess | BackendDataService | BackendDataSoftware | BackendDataStatistic;

export interface BackendDataBrowserContent {
  fileName: string;
  filePath: string;
  fileSize: number;
  mainType: string;
  prettyType: string;
  subType: string;
}

export interface BackendDataBrowser {
  dataKind: "BROWSER";
  contents: BackendDataBrowserContent[];
}

export enum BackendDataGlobalTempUnit {
  Celsius = "celsius",
  Fahrenheit = "fahrenheit",
}

export interface BackendDataGlobal {
  dataKind: "GLOBAL";
  dashboardVersion: string;
  loginNeeded: boolean;
  tempUnit: BackendDataGlobalTempUnit;
  updateCheck: boolean;
  dietpiUpdate?: string;
  nodes?: string[];
}

export interface BackendDataManagement {
  dataKind: "MANAGEMENT";
  arch: string;
  dpVersion: string;
  hostname: string;
  ipAddr: string;
  kernelVersion: string;
  netInterface: string;
  packageNumber: number;
  packageUpgrades: number;
  uptime: number;
}

export interface BackendDataProcessProcess {
  cpu: number;
  name: string;
  pid: number;
  ram: number;
  status: string;
}

export interface BackendDataProcess {
  dataKind: "PROCESS";
  processes: BackendDataProcessProcess[];
}

export interface BackendDataServiceService {
  log: string;
  name: string;
  startTime: string;
  status: string;
}

export interface BackendDataService {
  dataKind: "SERVICE";
  services: BackendDataServiceService[];
}

export interface BackendDataSoftware {
  dataKind: "SOFTWARE";
  installed: SoftwareData[];
  response: string;
  uninstalled: SoftwareData[];
}

export interface BackendDataStatisticNetwork {
  received: number;
  sent: number;
}

export interface BackendDataStatisticTemp {
  available: boolean;
  celsius: number;
  fahrenheit: number;
}

export interface BackendDataStatistic {
  dataKind: "STATISTIC";
  cpu: number;
  disk: UsageData;
  network: BackendDataStatisticNetwork;
  ram: UsageData;
  swap: UsageData;
  temp: BackendDataStatisticTemp;
}

export interface SoftwareData {
  dependencies: string;
  description: string;
  docs: string;
  id: number;
  name: string;
}

export interface UsageData {
  percent: number;
  total: number;
  used: number;
}
